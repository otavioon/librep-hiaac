:py:mod:`librep.base.data`
==========================

.. py:module:: librep.base.data


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   librep.base.data.ChainDataset
   librep.base.data.ConcatDataset
   librep.base.data.Dataset
   librep.base.data.IterableDataset
   librep.base.data.SimpleDataset
   librep.base.data.Subset




.. py:class:: ChainDataset(datasets)

   Bases: :py:obj:`IterableDataset`

   An abstract class representing a generic map-style dataset which
   implement the getitem and len protocols. All datasets that represent a map
   from keys to data samples should subclass it.

   Datasets subclassed from this class can be acessed using the subscription
   syntax, such as `dataset[index]`. It usually return a tuple where the first
   element represent the sample and the second, the label.

   All map-style datasets must be implement the len protocol which returns the
   number of samples in the dataset.


   .. py:method:: __iter__()


   .. py:method:: __len__()



.. py:class:: ConcatDataset(datasets)

   Bases: :py:obj:`Dataset`

   Dataset as a concatenation of multiple datasets.

   This class is useful to assemble different existing datasets.


   .. py:attribute:: cumulative_sizes
      :annotation: :List[int]

      

   .. py:attribute:: datasets
      :annotation: :List[Dataset]

      

   .. py:method:: __getitem__(idx)


   .. py:method:: __getitem_slice__(the_slice)


   .. py:method:: __len__()


   .. py:method:: cumsum(sequence)
      :staticmethod:



.. py:class:: Dataset

   An abstract class representing a generic map-style dataset which
   implement the getitem and len protocols. All datasets that represent a map
   from keys to data samples should subclass it.

   Datasets subclassed from this class can be acessed using the subscription
   syntax, such as `dataset[index]`. It usually return a tuple where the first
   element represent the sample and the second, the label.

   All map-style datasets must be implement the len protocol which returns the
   number of samples in the dataset.


   .. py:method:: __add__(other)


   .. py:method:: __getitem__(index)
      :abstractmethod:


   .. py:method:: __len__()
      :abstractmethod:



.. py:class:: IterableDataset

   Bases: :py:obj:`Dataset`

   An abstract class representing a generic map-style dataset which
   implement the getitem and len protocols. All datasets that represent a map
   from keys to data samples should subclass it.

   Datasets subclassed from this class can be acessed using the subscription
   syntax, such as `dataset[index]`. It usually return a tuple where the first
   element represent the sample and the second, the label.

   All map-style datasets must be implement the len protocol which returns the
   number of samples in the dataset.


   .. py:method:: __add__(other)


   .. py:method:: __iter__()
      :abstractmethod:



.. py:class:: SimpleDataset(X, y)

   Bases: :py:obj:`Dataset`

   A simple dataset implementation that return samples from an array.

   Parameters
   ----------
   X : ArrayLike
       An array-like data.
   y : ArrayLike
       An array-like set of labels.


   .. py:method:: __getitem__(index)


   .. py:method:: __len__()



.. py:class:: Subset(dataset, indices)

   Bases: :py:obj:`Dataset`

   Subset of a dataset at specified indices..

   Parameters
   ----------
   dataset : Dataset
       The dataset.
   indices : Sequence[int]
       Indices selected for subset.


   .. py:method:: __getitem__(index)


   .. py:method:: __len__()



