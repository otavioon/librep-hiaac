:py:mod:`librep.datasets.motionsense`
=====================================

.. py:module:: librep.datasets.motionsense


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   librep.datasets.motionsense.MotionSenseDataset
   librep.datasets.motionsense.MotionSenseDatasetGenerator
   librep.datasets.motionsense.RawMotionSense
   librep.datasets.motionsense.RawMotionSenseIterator




.. py:exception:: DatasetSplitError

   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.

   Initialize self.  See help(type(self)) for accurate signature.


.. py:class:: MotionSenseDataset(dataframe, sensors = None, label_columns = 'activity code', as_array = True)

   Bases: :py:obj:`librep.utils.dataset.PandasDataset`

   An abstract class representing a generic map-style dataset which
   implement the getitem and len protocols. All datasets that represent a map
   from keys to data samples should subclass it.

   Datasets subclassed from this class can be acessed using the subscription
   syntax, such as `dataset[index]`. It usually return a tuple where the first
   element represent the sample and the second, the label.

   All map-style datasets must be implement the len protocol which returns the
   number of samples in the dataset.


.. py:class:: MotionSenseDatasetGenerator(motionsense_iterator, time_window = None, window_overlap = None)

   Generate a custom MotionSense dataset from Raw MotionSense data.

   Parameters
   ----------
   motionsense_iterator : RawMotionSenseIterator
       The iterator object to iterate over users/activities dataframes.
   time_window : int
       Number of samples that compose a window.
       If None, a sample will be a single instant.
   window_overlap : int
       Number of samples to overlap over windows.

   .. py:method:: __create_time_series(data)

      Create a time series with defined window size and overlap.

      Parameters
      ----------
      data : pd.DataFrame
          Data to be splitted to windows. Windows consist in consecutive
          samples as features.

      Returns
      -------
      pd.DataFrame
          Dataframe with time windows.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: balance_dataset_to_minimum(dataframe, column = 'activity code')


   .. py:method:: check_if_unique_per_df(dataset_to_check, datasets_list, column = 'user')


   .. py:method:: create_datasets(train_size, validation_size, test_size, ensure_distinct_users_per_dataset = True, balance_samples = True, activities_remap = None, seed = None, use_tqdm = True)

      Create train/validation/test datasets.

      Parameters
      ----------
      train_size : float
          Fraction of samples to training dataset.
      validation_size : float
          Fraction of samples to validation dataset.
      test_size : float
          Fraction of samples to test dataset.
      ensure_distinct_users_per_dataset : bool
          If True, ensure that samples from an user do not belong to distinct
          datasets (the default is True).
      balance_samples : bool
          If True, the datasets will have the same number of samples per
          class. The number of samples will be reduced to the class with the
          minor number of samples (the default is True).
      activities_remap : Dict[int, int]
          A dictionaty used to replace a label from one class to another.
      seed : int
          The random seed (the default is None).
      use_tqdm : bool
          If must use tqdm as iterator (the default is True).

      Returns
      -------
      Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]
          A tuple with the train, validation and test dataframes.



   .. py:method:: get_full_df(use_tqdm = True)

      Concatenate dataframe from windows.

      Parameters
      ----------
      use_tqdm : bool
          If must use tqdm as iterator (the default is True).

      Returns
      -------
      pd.DataFrame
          A single dataframe, with all dataframe of windows, concatenated.



   .. py:method:: train_test_split(df, users, activities, train_size, validation_size, test_size, retries = 10, ensure_distinct_users_per_dataset = True, seed = None)



.. py:class:: RawMotionSense(dataset_dir, download = False)

   This class handles raw files from MotionSense Dataset.

   Parameters
   ----------
   dataset_dir : PathLike
       Path to the root of motion sense dataset.
   download : bool
       If the dataset must be downloaded before (the default is False).

   Attributes
   ----------
   metadata_df : pd.DataFrame
       Dataframe relating user and activities to the their respective files.
   activity_names : Dict[int, str]
       Dictionary relating activity codes to activity names
   activity_codes : Dict[str, int]
       Dictionary relating activity names to activity codes
   dataset_dir: Path
       Path to the root of motion sense dataset.

   .. py:attribute:: activity_codes
      

      

   .. py:attribute:: activity_names
      

      

   .. py:attribute:: dataset_url
      :annotation: = https://github.com/mmalekzadeh/motion-sense/raw/master/data/A_DeviceMotion_data.zip

      

   .. py:method:: __download_and_extract()

      Download and extract the MotionSense dataset (A only).


   .. py:method:: __read_metadata()

      Iterate over dataset files and create a metadata dataframe.
          The metadata relates user and activities to their respective files.

      Returns
      -------
      pd.DataFrame
          Metadata relating users and activities to their respective CSV files.



   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: activities()
      :property:


   .. py:method:: read_information(file, activity_code, user, trail = None)

      Read the information of an user/activity, based on the metadata.

      Parameters
      ----------
      file : PathLike
          Path to the CSV with from user and activity.
          Can be retrieved from the metadata dataframe.
      activity_code : int
          The activity code.
      user : int
          The ID of the user.
      trail : Optional[int]
          The trial number.

      Returns
      -------
      pd.DataFrame
          Dataframe with the information of the oif the .

      Raises
      ------
      ExceptionName
          Why the exception is raised.



   .. py:method:: users()
      :property:



.. py:class:: RawMotionSenseIterator(motionsense, users_to_select = None, activities_to_select = None, shuffle = False)

   Iterate over RawMotionSense files.
       Return a dataframe with samples from an user/activity.

   Parameters
   ----------
   motionsense : RawMotionSense
       RawMotionSense data files object.
   users_to_select : List[str]
       Users to select. If None, iterate over all users.
   activities_to_select : List[str]
       Activities to select. If None, iterate over all activities.
   shuffle : bool
       If must iterate randomly.

   .. py:method:: __get_data_iterator()

      Get an iterator to iterate over selected dataframes.

      Returns
      -------
      pd.DataFrame
          A dataframe for a user/activity.


   .. py:method:: __iter__()


   .. py:method:: __next__()


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __str__()

      Return str(self).



