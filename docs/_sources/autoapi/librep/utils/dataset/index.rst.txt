:py:mod:`librep.utils.dataset`
==============================

.. py:module:: librep.utils.dataset


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   librep.utils.dataset.PandasDataset
   librep.utils.dataset.PandasDatasetsIO



Functions
~~~~~~~~~

.. autoapisummary::

   librep.utils.dataset.load_full_data



.. py:class:: PandasDataset(dataframe, features_columns, label_columns, as_array = True)

   Bases: :py:obj:`librep.base.data.Dataset`

   An abstract class representing a generic map-style dataset which
   implement the getitem and len protocols. All datasets that represent a map
   from keys to data samples should subclass it.

   Datasets subclassed from this class can be acessed using the subscription
   syntax, such as `dataset[index]`. It usually return a tuple where the first
   element represent the sample and the second, the label.

   All map-style datasets must be implement the len protocol which returns the
   number of samples in the dataset.

   .. py:method:: __getitem__(index)


   .. py:method:: __len__()


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __str__()

      Return str(self).



.. py:class:: PandasDatasetsIO(path, train_filename = 'train.csv', validation_filename = 'validation.csv', test_filename = 'test.csv')

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: load(load_train = True, load_validation = True, load_test = True)


   .. py:method:: save(train, validation, test, description_file = 'README.md', description = None)



.. py:function:: load_full_data(dataset, return_X_y = True, shuffle = False)


